
    <div class="form-group">
        <label>Inventories</label>
        <ViewInventoriesComponent DisplaySearchResult="true" OnSelectInventory="SelectInventory"></ViewInventoriesComponent>
    </div>

    @if(ProductInventories != null && ProductInventories.Count > 0)
    {
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
    @foreach (var prodinv in ProductInventories)
    {
         <tr>
             <td>@prodinv.Inventory.InventoryName</td>
             <td><input type="number" min="0"
                 @bind-value="@prodinv.InventoryQuantity" @bind-value:event="oninput" @onchange="OnInventoryQtyChanged"/>
                 </td>
             <td><button class="btn btn-danger" onclick="@(() => RemoveInventory(prodinv))">Remove</button></td>
         </tr>
    }
   </tbody>
    </table>  
    }



@code {

    [Parameter]
    public EventCallback<List<ProductInventory>> OnInventorySelected { get; set; }

    public List<ProductInventory> ProductInventories = new();

    private void SelectInventory(Inventory inventory)
    {
        if(!ProductInventories.Any(x => x.Inventory.InventoryName.Equals(inventory.InventoryName, StringComparison.OrdinalIgnoreCase)))
        {
            ProductInventories.Add(new ProductInventory{InventoryId = inventory.InventoryId, Inventory = inventory});
        }
        OnInventorySelected.InvokeAsync(ProductInventories);
    }

    private void RemoveInventory(ProductInventory ProductInventory)
    {
        ProductInventories.Remove(ProductInventory);
        StateHasChanged();
    }

    private async Task OnInventoryQtyChanged()
    {
        await OnInventorySelected.InvokeAsync(ProductInventories);
    }
}
