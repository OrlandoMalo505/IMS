@page "/addproduct"
@inject NavigationManager _navigation
@inject IAddProductUseCase _addProduct

<h3>Add Product</h3>
<br />
@if (Product != null)
{
    <EditForm Model="Product" OnValidSubmit="CreateProduct">
        <DataAnnotationsValidator/>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="Product.ProductName" class="form-control"></InputText>
             <ValidationMessage For="() => Product.ProductName"></ValidationMessage>
        </div>
         <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control"></InputNumber>
            <ValidationMessage For="() => Product.Quantity"></ValidationMessage>
        </div>
         <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="Product.Price" class="form-control"></InputNumber>
            <ValidationMessage For="() => Product.Price"></ValidationMessage>
        </div>
        
            <ProductInventoriesComponent @ref="ProductInventoriesComponent" OnInventorySelected="SelectInventories"></ProductInventoriesComponent>
        

        <div class="mt-2">
        <button type="submit" class="btn btn-primary">Save</button>
        </div>

    </EditForm>
    }

@code {

    private Product? Product { get; set; } = new Product();

    private ProductInventoriesComponent ProductInventoriesComponent;

    private async Task CreateProduct()
    {
        if (Product != null)
        {
            ProductInventoriesComponent.ProductInventories.ForEach(x =>
            {
                x.ProductId = Product.ProductId;
            });

            Product.ProductInventories = ProductInventoriesComponent.ProductInventories;
            await _addProduct.ExecuteAsync(Product);
            _navigation.NavigateTo("/products");

        }

    }

    private async Task SelectInventories(List<ProductInventory> productInventories)
    {
        Product.ProductInventories = productInventories;
    }

}
