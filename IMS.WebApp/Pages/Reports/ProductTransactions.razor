@page "/productreport"
@inject ISearchProductTransactionsUseCase _searchProduct

<h3>Product Transactions</h3>
<br />

<div class="row">

    <div class="col">
        <label for="prod">Product Name</label>
        <input type="text" id="prod" class="form-control" @bind-value="ProductName" />
    </div>

    <div class="col">
        <label for="dtf">Date From</label>
        <input type="date" id="dtf" class="form-control" @bind-value="DateFrom" />
    </div>

    <div class="col">
        <label for="dtt">Date To</label>
        <input type="date" id="dtt" class="form-control" @bind-value="DateTo" />
    </div>

    <div class="col">
        <label for="act">Activity Type</label>
        <select id="act" class="form-control" @bind="ActivityTypeId">
            <option value="0"></option>
            <option value="1">Produce Product</option>
            <option value="2">Sell Product</option>
        </select>
    </div>

    <div class="col">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary form-control" @onclick="SearchProducts">Search</button>
    </div>
</div>
<br />

@if (Products != null && Products.Count() > 0)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Product</th>
                <th>Activity</th>
                <th>Qty Before</th>
                <th>Qty After</th>
                <th>Production #</th>
                <th>SO #</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prod in Products)
            {
                <tr>
                    <td>@prod.TransactionDate.ToString("MM/dd/yyyy")</td>
                    <td>@prod.Product.ProductName</td>
                    <td>
                        @if(prod.ActivityType == ProductTransactionType.ProduceProduct)
                        {
                            <text>Produce</text>
                        }
                        else if (prod.ActivityType == ProductTransactionType.SellProduct)
                        {
                            <text>Sell</text>
                        }
                    </td>
                    <td>@prod.QuantityBefore</td>
                    <td>@prod.QuantityAfter</td>
                    <td>@prod.ProductionNumber</td>
                    <td>@prod.SalesOrderNumber</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    public string ProductName { get; set; }
    public DateTime? DateFrom { get; set; }
    public DateTime? DateTo { get; set; }
    public int? ActivityTypeId { get; set; } = 0;
    public IEnumerable<ProductTransaction> Products { get; set; } 

    private async Task SearchProducts()
    {
        ProductTransactionType? productTransactionType = null;

        if(ActivityTypeId != 0)
        {
            productTransactionType = (ProductTransactionType)ActivityTypeId;
        }

        Products = await _searchProduct.ExecuteAsync(ProductName, DateFrom, DateTo, productTransactionType);
    }
}
