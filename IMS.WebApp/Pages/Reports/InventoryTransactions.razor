@page "/inventoryreport"
@inject ISearchInventoryTransactionsUseCase searchInventory
@inject IJSRuntime _jsRuntime

<h3>Inventory Transactions</h3>
<br />
<div id="printarea">
<div class="row">

    <div class="col">
        <label for="inv">Inventory Name</label>
        <input type="text" id="inv" class="form-control" @bind-value="InvName" />
    </div>

    <div class="col">
        <label for="dtf">Date From</label>
        <input type="date" id="dtf" class="form-control" @bind-value="DateFrom" />
    </div>

    <div class="col">
        <label for="dtt">Date To</label>
        <input type="date" id="dtt" class="form-control" @bind-value="DateTo" />
    </div>

    <div class="col">
        <label for="act">Activity Type</label>
        <select id="act" class="form-control" @bind="ActivityTypeId">
            <option value="0"></option>
            <option value="1">Purchase Inventory</option>
            <option value="2">Produce Product</option>
        </select>
    </div>

    <div class="col">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary form-control" @onclick="SearchInventories">Search</button>
    </div>
    <div class="col">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary form-control" @onclick="PrintReport">Print</button>
    </div>
</div>
<br />

@if (Inventories != null && Inventories.Count() > 0)
{
        <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Inventory</th>
                <th>Activity</th>
                <th>Qty Before</th>
                <th>Qty After</th>
                <th>PO #</th>
                <th>Production #</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inv in Inventories)
            {
                <tr>
                    <td>@inv.TransactionDate.ToString("MM/dd/yyyy")</td>
                    <td>@inv.Inventory.InventoryName</td>
                    <td>
                        @if(inv.ActivityType == InventoryTransactionType.PurchaseInventory)
                        {
                            <text>Purchase</text>
                        }
                        else if (inv.ActivityType == InventoryTransactionType.ProduceProduct)
                        {
                            <text>Produce</text>
                        }
                    </td>
                    <td>@inv.QuantityBefore</td>
                    <td>@inv.QuantityAfter</td>
                    <td>@inv.PoNumber</td>
                    <td>@inv.ProductionNumber</td>
                </tr>
            }
        </tbody>
    </table>
}
</div>
@code {

    public string InvName { get; set; }
    public DateTime? DateFrom { get; set; }
    public DateTime? DateTo { get; set; }
    public int? ActivityTypeId { get; set; } = 0;
    public IEnumerable<InventoryTransaction> Inventories { get; set; } 

    private async Task SearchInventories()
    {
        InventoryTransactionType? inventoryTransactionType = null;

        if(ActivityTypeId != 0)
        {
            inventoryTransactionType = (InventoryTransactionType)ActivityTypeId;
        }

        Inventories = await searchInventory.ExecuteAsync(InvName, DateFrom, DateTo, inventoryTransactionType);
    }

    private void PrintReport()
    {
        _jsRuntime.InvokeVoidAsync("print");
    }
}
