@page "/editproduct/{ProdId:int}"
@inject IViewProductByIdUseCase _viewProductById
@inject IEditProductUseCase _editProduct
@inject NavigationManager _navigation

<h3>Edit Product</h3>

@if(Product != null)
{
    <EditForm Model="Product" OnValidSubmit="UpdateProduct">
        <DataAnnotationsValidator/>

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="Product.ProductName" class="form-control"></InputText>
             <ValidationMessage For="() => Product.ProductName"></ValidationMessage>
        </div>
         <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control"></InputNumber>
            <ValidationMessage For="() => Product.Quantity"></ValidationMessage>
        </div>
         <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="Product.Price" class="form-control"></InputNumber>
            <ValidationMessage For="() => Product.Price"></ValidationMessage>
        </div>

        <ProductInventoriesComponent ProductInventories="Product.ProductInventories" OnInventorySelected="SelectedInventory">

        </ProductInventoriesComponent>

        <div class="mt-2">
        <button type="submit" class="btn btn-primary">Update</button>
        </div>

    </EditForm>
}

@code {

    [Parameter]
    public int ProdId { get; set; }

    public Product Product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Product = await _viewProductById.ExecuteAsync(ProdId);
    }

    private async Task UpdateProduct()
    {
        if(Product != null)
        {
            await _editProduct.ExecuteAsync(Product);
            _navigation.NavigateTo("/products");

        }
    }

    private void SelectedInventory(List<ProductInventory> productInventories)
    {
        Product.ProductInventories = productInventories;
    }

}
